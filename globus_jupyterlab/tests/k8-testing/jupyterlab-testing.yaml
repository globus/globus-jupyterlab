proxy:
  https:
    enabled: true
    hosts:
      - jupyterlab-testing.nick.globuscs.info
    letsencrypt:
      contactEmail: nick@globus.org

hub:
  config:
    # Authenticator:
      # Enable Globus Tokens in the notebooks from the hub service
      # enable_auth_state: true
    GlobusOAuthenticator:
      client_id: ""
      client_secret: ""
      oauth_callback_url: https://jupyterlab-testing.nick.globuscs.info/hub/oauth_callback
      # admin_globus_groups:
      #   - '7a346d31-3838-11ec-af8e-f561b5a488be'
      scope:
        - 'email'
        - 'profile'
        - 'openid'
    JupyterHub:
      authenticator_class: globus
  extraConfig:
    00-server-settings: |
      c.JupyterHub.tornado_settings = {'cookie_options': {'expires_days': 1}}
    10-username-settings: |
      import base64
      from oauthenticator.globus import GlobusOAuthenticator
      class OmniProviderOAuthenticator(GlobusOAuthenticator):
          def get_username(self, user_info):
              self.log.info(f'User login successful: {user_info.get("preferred_username")}')
              username, domain = user_info.get('preferred_username').split('@', 1)
              # 'sub' is a uniquely generated uuid by Globus for each user identity
              enc_sub = base64.b32encode(bytes(user_info['sub'], 'utf-8')).decode('utf-8')
              return f'{username}-{enc_sub}'[:32]
      c.JupyterHub.authenticator_class = OmniProviderOAuthenticator
    20-keep-all-tokens: |
      c.OAuthenticator.exclude_tokens = []

singleuser:
  defaultUrl: "/lab"
  extraEnv:
    JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"
  # storage:
  #   type: none
  image:
    name: nsglobusautobuilds/jupyterlab-testing
    tag: latest
    pullPolicy: "Always"
  memory:
    limit: 400M
    guarantee: 200M
  cpu:
    limit: .4
    guarantee: .1
prePuller:
  hook:
    enabled: false
  continuous:
    enabled: false

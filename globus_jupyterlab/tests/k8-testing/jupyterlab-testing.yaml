proxy:
  https:
    enabled: true
    hosts:
      - jupyterlab-testing.nick.globuscs.info
    letsencrypt:
      contactEmail: nick@globus.org

hub:
  image:
    #   # Optional, contains a 'hub service' for testing delegated transfer
    name: nsglobusautobuilds/jupyterhub-service-testing
    tag: latest
    pullPolicy: Always
  #  name: jupyterhub/k8s-hub
  #  tag: 1.2.0
  config:
    Authenticator:
      # Enable Globus Tokens in the notebooks from the hub service
      enable_auth_state: true
    GlobusOAuthenticator:
      client_id: ""
      client_secret: ""
      oauth_callback_url: https://jupyterlab-testing.nick.globuscs.info/hub/oauth_callback
      # admin_globus_groups:
      #   - '7a346d31-3838-11ec-af8e-f561b5a488be'
      scope:
        - "email"
        - "profile"
        - "openid"
    JupyterHub:
      authenticator_class: globus
  extraConfig:
    00-server-settings: |
      c.JupyterHub.tornado_settings = {'cookie_options': {'expires_days': 1}}
    20-keep-all-tokens: |
      c.OAuthenticator.exclude_tokens = []
    # 30-set-home-dir: |
    # c.KubeSpawner.working_dir = '/home/{username}'
    40-set-username-in-auth-state: |
      from oauthenticator.globus import GlobusOAuthenticator

      class CustomGlobusOAuthenticator(GlobusOAuthenticator):
          async def authenticate(self, handler, data=None):
              data = await super().authenticate(handler, data)
              data['auth_state']['name'] = data['name']
              return data

      c.JupyterHub.authenticator_class = CustomGlobusOAuthenticator

    # 35-set-server-user: |
    #   def userdata_hook(spawner, auth_state):
    #     spawner.environment['NB_USER'] = auth_state["name"]

    #   c.Spawner.auth_state_hook = userdata_hook
    # 40-set-local-globus-collection: |
    #   # Note: This is possible in either the globus-jupyter var or via OAuthehnticator
    #   c.OAuthenticator.globus_local_endpoint = '1346ef68-d9b8-4757-a537-47cefb7698e8'
  # Note: Requires acls service to be built into the hub image.
  services:
    acls-service:
      url: http://hub:8181
      command:
        - flask
        - run
        - --port
        - "8181"
      environment:
        FLASK_APP: "usr/src/flask/app.py"
        CLIENT_ID: ""
        CLIENT_SECRET: ""
        GLOBUS_COLLECTION_ID: "1346ef68-d9b8-4757-a537-47cefb7698e8"

  networkPolicy:
    ingress:
      - ports:
          - port: 8181
        from:
          - podSelector:
              matchLabels:
                hub.jupyter.org/network-access-hub: "true"

  service:
    extraPorts:
      - port: 8181
        targetPort: 8181
        name: acls-service

singleuser:
  defaultUrl: "/lab"
  extraEnv:
    JUPYTERHUB_SINGLEUSER_APP: "jupyter_server.serverapp.ServerApp"
    GLOBUS_COLLECTION_ID: "acfeef4a-4afc-4120-aebd-05cd47fb10bb"
    GLOBUS_HOST_COLLECTION_BASEPATH: "/"
    GLOBUS_HOST_POSIX_BASEPATH: "/home/jovyan"
    GLOBUS_TOKEN_STORAGE_PATH: "/private/globus_jupyterlab_tokens.json"
    CHOWN_HOME: "yes"
  storage:
    type: static
    extraLabels: {}
    static:
      pvcName: nfs
      subPath: "home/shared"
    capacity: 10Gi
    # homeMountPath: /home/jovyan
  image:
    name: nsglobusautobuilds/jupyterlab-testing
    tag: latest
    pullPolicy: "Always"
  memory:
    limit: 400M
    guarantee: 200M
  cpu:
    limit: .4
    guarantee: .1
prePuller:
  hook:
    enabled: false
  continuous:
    enabled: false
